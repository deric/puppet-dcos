# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
require 'json'

# ---- original file header ----
#
# @summary
#   Convert resources hash to a JSON format accepted by Mesos
#
#
Puppet::Functions.create_function(:'dcos::dcos_resources') do
  # @param arguments
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :arguments
  end


  def default_impl(*arguments)
    

    if arguments.size > 0 and arguments[0].nil?
      raise(Puppet::ParseError, "dcos_resources(): expected valid hash, got nil")
      return nil
    end

    raise(Puppet::ParseError, "dcos_resources(): Wrong number of arguments " +
      "given (#{arguments.size} instead of 1") if arguments.size != 1

    resources = arguments[0]
    mesos_res = []
    resources.each do |k, v|
      v["name"] = k
      mesos_res << v
    end

    return mesos_res.to_json
  
  end
end
