# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
require 'json'

#
# @summary
#   This function takes data, outputs making sure the hash keys are sorted
# *Examples:*
#    sorted_json({"foo"=>"value","bar"=>"value"})
# Would return: {"bar"=>"value","foo"=>"value"}
#
#
Puppet::Functions.create_function(:'dcos::sorted_json') do
  # @param arguments
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    required_param 'Hash', :json
  end

  def sorted_generate(obj)
    case obj
    when Array
      arrayRet = []
      obj.each do |a|
        arrayRet.push(sorted_generate(a))
      end
      '[' << arrayRet.join(',') << ']'
    when Hash
      ret = []
      obj.keys.sort.each do |k|
        ret.push(k.to_json << ":#{sorted_generate(obj[k])}")
      end
      '{' << ret.join(',') << '}'
    when String
      obj.to_json
    else
      obj.to_json
    end
  end # end def

  def sorted_json(h)
    sorted_generate(h)
  end

  def default_impl(json)
    sorted_json(json)
  end
end
